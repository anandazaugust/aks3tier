# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#t
trigger: none
pr: none
#totesttriggert


pool:
  vmImage: ubuntu-latest

# pool: Default


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

parameters:
 - name: what_job
   type: string
   default: onlyaksjob
 - name: akscluster
   type: string
   default: aksmar12
 - name: acrname
   type: string
   default: acrmar12
 # - name: manifests
 #   type: string
 #   default: '$(Build.SourcesDirectory)/New folder (2)/myfrontendpod.yml'
 - name: tier
   type: string
   default: 'frontend'
   values: 
     - frontend
     - backend

#  - name: what_tag
#    type: string
#  - name: image_tag
#    type: string
#    default: $(Build.BuildId)

  

variables:
  imageName-frontend: 'frontend'  # Your image name
  imageName-backend: 'backend'
  acrName: 'acrmar11'  # Your Azure Container Registry name
  tag: $(Build.BuildId)   # Tag for your image
  # tag2: ${{ parameters.image_tag }}
  # tag: ${{ parameters.image_tag }}
  dockerFilePath-frontend: frontend/Dockerfile
  dockerFilePath-backend: backend/Dockerfile
  IMAGE_NAME : $(acrName).azurecr.io/$(imageName-frontend):$(tag)
  IMAGE_NAME3 : $(acrName).azurecr.io/$(imageName-backend):$(tag)
  IMAGE_NAME2 : $(acrName).azurecr.io/$(imageName-backend):$(onlyaksjob_tag)
  akscluster: aksmar11
  aksrg: 'rg-mylabmylabuksouthp-example'
  manifests: '$(Build.SourcesDirectory)/New folder (2)/${{ parameters.tier }}.yml'
 
  
      

jobs:

 - job: buildpushtoacrjob
   displayName: build&pushtoACRJob
   condition: ${{ eq(parameters.what_job, 'acrandaksjob' ) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name $(acrName)'
            # scriptPath: # string. Required when scriptLocation = scriptPath. Script Path. 
            

        - script: |
            echo "Building Docker image..."
            docker build -f $(dockerFilePath) -t $(pa).azurecr.io/$(imageName):$(tag) .  # Build the image and tag it
          displayName: 'Build Docker Image script'

        - script: |
            echo "show docker image..."
            docker images
          displayName: 'show docker images script'

        # Step 4: Push Docker Image to Azure Container Registry (ACR)
        - script: |
            echo "Pushing Docker image to ACR..."
            docker push $(acrName).azurecr.io/$(imageName):$(tag)  # Push the image to ACR
          displayName: 'Push Docker Image to ACR script'

 - job: onlyacrjobfrontend
   displayName: onlyacrjob-frontend
   condition:  ${{ and(in(parameters.what_job, 'onlyacrjob'), in(parameters.tier, 'frontend')) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name ${{ parameters.acrname }}'
            # scriptPath: # string. Required when scriptLocation = scriptPath. Script Path. 
        - script: |
            echo "npm installation..."
            cd frontend
            npm install
          displayName: 'installing npm'  

        - script: |
            echo "Building Docker image..."
            docker build -f $(dockerFilePath-frontend) -t ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag) .  # Build the image and tag it
          displayName: 'Build Docker Image script'

        - script: |
            echo "show docker image..."
            docker images
          displayName: 'show docker images script'

        # Step 4: Push Docker Image to Azure Container Registry (ACR)
        - script: |
            echo "Pushing Docker image to ACR..."
            docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag)  # Push the image to ACR
          displayName: 'Push Docker Image to ACR script'

 
 - job: onlyacrjobbackend
   displayName: onlyacrjob-backend
   condition: ${{ and(in(parameters.what_job, 'onlyacrjob'), in(parameters.tier, 'backend')) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name ${{ parameters.acrname }}'
            # scriptPath: # string. Required when scriptLocation = scriptPath. Script Path. 
        - script: |
            echo "npm installation..."
            cd backend
            npm install mysql2
            npm install
          displayName: 'installing npm'  
        

        - script: |
            echo "Building Docker image..."
            docker build -f $(dockerFilePath-backend) -t ${{ parameters.acrname }}.azurecr.io/$(imageName-backend):$(tag) .  # Build the image and tag it
          displayName: 'Build Docker Image script'

        - script: |
            echo "show docker image..."
            docker images
          displayName: 'show docker images script'

        # Step 4: Push Docker Image to Azure Container Registry (ACR)
        - script: |
            echo "Pushing Docker image to ACR..."
            docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-backend):$(tag)  # Push the image to ACR
          displayName: 'Push Docker Image to ACR script'


 - job: aksjob1
   
   displayName: CreateAKSPOD-JOB1 
   dependsOn: buildpushtoacrjob
  #  condition: ${{ eq(parameters.what_job, 'onlyaksjob' ) }}
   condition:  ${{ in(parameters.what_job, 'acrandaksjob')}}

   steps:
    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'
      displayName: installkubelogin
    - script: |
            sed -i "s|#{IMAGE_NAME}#|$(IMAGE_NAME)|g" deployaks.yaml
      displayName: 'Replace Image Name in Manifest'
      

    - task: KubernetesManifest@1
      displayName: DeployAKSPOD
      inputs:
          action: 'deploy'
          connectionType: 'azureResourceManager'
          azureSubscriptionConnection: 'myaksfeb072025'
          # azureResourceGroup: 'rg-mylabmylabuksouthp-example'
          azureResourceGroup: $(aksrg)
          # kubernetesCluster: 'aksfeb08'
          kubernetesCluster: $(akscluster)
          manifests: '$(Build.SourcesDirectory)/deployment.yml'
          # imagePullSecrets: 'my1secret'
    
 - job: aksjob2
   displayName: CreateAKSPOD-JOB2-onlyaksjob
   dependsOn: buildpushtoacrjob
   timeoutInMinutes: 3 # how long to run the job before automatically cancelling
   cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
   condition: ${{ eq(parameters.what_job, 'onlyaksjob' ) }}
  #  condition:  ${{ in(parameters.what_job, 'onlyaksjob', 'acrandaksjob')}}

   steps:
    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'
      displayName: installkubelogin
    # - script: |
    #         sed -i "s|#{IMAGE_NAME}#|$(IMAGE_NAME2)|g" deployaks.yaml
    #   displayName: 'Replace Image Name in Manifest'
      

    - task: KubernetesManifest@1
      displayName: DeployAKSPOD
      inputs:
          action: 'deploy'
          connectionType: 'azureResourceManager'
          azureSubscriptionConnection: 'myaksfeb072025'
          # azureResourceGroup: 'rg-mylabmylabuksouthp-example'
          azureResourceGroup: $(aksrg)
          # kubernetesCluster: 'aksfeb08'
          kubernetesCluster: ${{ parameters.akscluster }}
          # manifests: '$(Build.SourcesDirectory)/New folder (2)/myfrontendpod.yml'
          # manifests: ${{ parameters.manifests }}
          manifests: $(manifests)
          # imagePullSecrets: 'my1secret'
