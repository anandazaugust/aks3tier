#t


trigger: none
pr: none



pool:
  vmImage: ubuntu-latest






parameters:
 - name: what_job
   type: string
   default: onlyaksjob
 - name: akscluster
   type: string
   default: aksmar12
 - name: acrname
   type: string
   default: acrmar12

 - name: tier
   type: string
   default: 'frontend'
   values: 
     - frontend
     - backend



  

variables:
  imageName-frontend: 'frontend'  # Your image name
  imageName-backend: 'backend'
  acrName: 'acrmar11'  # Your Azure Container Registry name
  tag: $(Build.BuildId)   # Tag for your image
  dockerFilePath-frontend: frontend/Dockerfile
  dockerFilePath-backend: backend/Dockerfile
  IMAGE_NAME_frontend : $(acrName).azurecr.io/$(imageName-frontend):$(tag)
  IMAGE_NAME_backend : $(acrName).azurecr.io/$(imageName-backend):$(tag)
  IMAGE_NAME2 : $(acrName).azurecr.io/$(imageName-backend):$(onlyaksjob_tag)
  akscluster: aksmar11
  aksrg: 'rg-mylabmylabuksouthp-example'
  manifests: '$(Build.SourcesDirectory)/New folder (2)/${{ parameters.tier }}.yml'
 
  
      

jobs:



 - job: onlyacrjobfrontend
   displayName: onlyacrjob-frontend
   condition:  ${{ and(in(parameters.what_job, 'onlyacrjob'), in(parameters.tier, 'frontend')) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name ${{ parameters.acrname }}'
          
        # - script: |
        #     echo "npm installation..."
        #     cd frontend
        #     npm install
        #   displayName: 'installing npm'  

        # - script: |
        #     echo "Building Docker image..."
        #     docker build -f $(dockerFilePath-frontend) -t ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag) .  # Build the image and tag it
        #   displayName: 'Build Docker Image script'

        # - script: |
        #     echo "show docker image..."
        #     docker images
        #   displayName: 'show docker images script'


        # - script: |
        #     echo "Pushing Docker image to ACR..."
        #     docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag)  # Push the image to ACR
        #   displayName: 'Push Docker Image to ACR script'

        - script: |
            echo $(Build.BuildId) > $(Build.ArtifactStagingDirectory)/image-tag.txt
          displayName: 'Save Image Tag to Artifact'

        # Publish the artifact (image tag)
        - publish: $(Build.ArtifactStagingDirectory)/image-tag.txt
          artifact: image-tag
          displayName: 'Publish Image Tag Artifact'



        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'specific'
            project: '72b2d7e8-f689-474f-99ed-cb1a3749837a'
            pipeline: '66'
            buildVersionToDownload: 'latest'
            downloadType: 'single'
            downloadPath: '$(Build.ArtifactStagingDirectory)'

        - script: |
            # Read the image tag from the artifact
            IMAGE_TAG=$(cat $(Build.ArtifactStagingDirectory)/image-tag.txt)
            echo "Using image tag: $IMAGE_TAG"
        

        
