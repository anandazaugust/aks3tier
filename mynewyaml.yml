

trigger: none
pr: none



pool:
  vmImage: ubuntu-latest






parameters:
=

 - name: acrname
   type: string
   default: acrmar14

 - name: tier
   type: string
   default: 'frontend'
   values: 
     - frontend
     - backend



  

variables:
  imageName-frontend: 'frontend'  # Your image name
  imageName-backend: 'backend'

  tag: $(Build.BuildId)   # Tag for your image
  dockerFilePath-frontend: frontend/Dockerfile
  dockerFilePath-backend: backend/Dockerfile
  # IMAGE_NAME_frontend : $(acrName).azurecr.io/$(imageName-frontend):$(tag)
  # IMAGE_NAME_backend : $(acrName).azurecr.io/$(imageName-backend):$(tag)
  # IMAGE_NAME2 : $(acrName).azurecr.io/$(imageName-backend):$(onlyaksjob_tag)


  
      

jobs:


 - job: onlyacrjobfrontend
   displayName: onlyacrjob-frontend
   condition:  ${{ eq(parameters.tier, 'frontend' ) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name ${{ parameters.acrname }}'
          
        - script: |
            echo "npm installation..."
            cd frontend
            npm install
          displayName: 'installing npm'  

        - script: |
            echo "Building Docker image..."
            docker build -f $(dockerFilePath-frontend) -t ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag) .  # Build the image and tag it
          displayName: 'Build Docker Image script'

        - script: |
            echo "show docker image..."
            docker images
          displayName: 'show docker images script'


        - script: |
            echo "Pushing Docker image to ACR..."
            docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag)  # Push the image to ACR
          displayName: 'Push Docker Image to ACR script'
        - script: |
         
               docker tag ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):$(tag) ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):latest
               docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-frontend):latest
 
 - job: onlyacrjobbackend
   displayName: onlyacrjob-backend
   condition: ${{ and(in(parameters.what_job, 'onlyacrjob'), in(parameters.tier, 'backend')) }}
   steps:

        - task: AzureCLI@2
          displayName: login to ACR task
          inputs:
            azureSubscription: 'myaksfeb072025'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az acr login --name ${{ parameters.acrname }}'
          
        - script: |
            echo "npm installation..."
            cd backend
            npm install mysql2
            npm install
          displayName: 'installing npm'  
        

        - script: |
            echo "Building Docker image..."
            docker build -f $(dockerFilePath-backend) -t ${{ parameters.acrname }}.azurecr.io/$(imageName-backend):$(tag) .  # Build the image and tag it
          displayName: 'Build Docker Image script'

        - script: |
            echo "show docker image..."
            docker images
          displayName: 'show docker images script'

     
        - script: |
            echo "Pushing Docker image to ACR..."
            docker push ${{ parameters.acrname }}.azurecr.io/$(imageName-backend):$(tag)  # Push the image to ACR
          displayName: 'Push Docker Image to ACR script'


 - job: aksjob1
   
   displayName: CreateAKSPOD-JOB1 
   dependsOn: buildpushtoacrjob
   condition:  ${{ in(parameters.what_job, 'acrandaksjob')}}

   steps:
    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'
      displayName: installkubelogin
    - script: |
            sed -i "s|#{IMAGE_NAME}#|$(IMAGE_NAME)|g" deployaks.yaml
      displayName: 'Replace Image Name in Manifest'
      

    - task: KubernetesManifest@1
      displayName: DeployAKSPOD
      inputs:
          action: 'deploy'
          connectionType: 'azureResourceManager'
          azureSubscriptionConnection: 'myaksfeb072025'
          azureResourceGroup: $(aksrg)
          kubernetesCluster: $(akscluster)
          manifests: '$(Build.SourcesDirectory)/deployment.yml'

    
 - job: aksjobfrontend_onlyaks
   displayName: AKSJobfrontend-onlyaks
   dependsOn: buildpushtoacrjob
   timeoutInMinutes: 3 # how long to run the job before automatically cancelling
   cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
   condition:  ${{ and(in(parameters.what_job, 'onlyaksjob'), in(parameters.tier, 'frontend')) }}
  

   steps:
    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'
      displayName: installkubelogin
    - script: |
            sed -i "s|#{IMAGE_NAME}#|$(IMAGE_NAME_frontend)|g" {{ parameters.tier }}.yml
      displayName: 'Replace Image Name in Manifest'
      

    - task: KubernetesManifest@1
      displayName: DeployAKSPOD
      inputs:
          action: 'deploy'
          connectionType: 'azureResourceManager'
          azureSubscriptionConnection: 'myaksfeb072025'
          azureResourceGroup: $(aksrg)        
          kubernetesCluster: ${{ parameters.akscluster }}        
          manifests: $(manifests)
       
 - job: aksjobbackend_onlyaks
   displayName: AKSjobbackend-onlyaks
   dependsOn: buildpushtoacrjob
   timeoutInMinutes: 3 # how long to run the job before automatically cancelling
   cancelTimeoutInMinutes: 2 # how much time to give 'run always even if cancelled tasks' before stopping them
   condition:  ${{ and(in(parameters.what_job, 'onlyaksjob'), in(parameters.tier, 'backend')) }}
  

   steps:
    - task: KubeloginInstaller@0
      inputs:
        kubeloginVersion: 'latest'
      displayName: installkubelogin
    - script: |
            sed -i "s|#{IMAGE_NAME}#|$(IMAGE_NAME_backend)|g" {{ parameters.tier }}.yml
      displayName: 'Replace Image Name in Manifest'
      

    - task: KubernetesManifest@1
      displayName: DeployAKSPOD
      inputs:
          action: 'deploy'
          connectionType: 'azureResourceManager'
          azureSubscriptionConnection: 'myaksfeb072025'
          azureResourceGroup: $(aksrg)        
          kubernetesCluster: ${{ parameters.akscluster }}        
          manifests: $(manifests)
